import 'util/stats.dart';

/// Base class for all process types.
abstract class Process {
  final String name;

  Process(this.name);

  /// Returns a list of all events generated by this process.
  List<Event> generateEvents();
}

/// An event that occurs once at a fixed time.
class Event {
  final String processName;
  final int arrivalTime;
  final int duration;

  int? startTime;
  int? endTime;

  Event(this.processName, this.arrivalTime, this.duration);

  int get waitTime => (startTime ?? 0) - arrivalTime;
}

// singleton process
// process generates a single event with a fixed, finite duration (aka service time) and a pre-determined arrival time
class SingletonProcess extends Process {
  final int duration;
  final int arrival;

  //print("code reached here");
  SingletonProcess(String name, this.duration, this.arrival) : super(name);

  @override
  List<Event> generateEvents() {
    return [Event(name, arrival, duration)];
  }
}

// periodic process
// process generates multiple events with fixed durations, and fixed interarrival times
class PeriodicProcess extends Process {
  final int duration;
  final int interarrivalTime;
  final int firstArrival;
  final int numRepetitions;

// for (var event in events) {
//   print('Event: ${event.processName}, Arrival Time: ${event.arrivalTime}, Duration: ${event.duration}');
// }

  PeriodicProcess(String name, this.duration, this.interarrivalTime,
      this.firstArrival, this.numRepetitions)
      : super(name);

  @override
  List<Event> generateEvents() {
    List<Event> events = [];
    int arrivalTime = firstArrival;
    for (int i = 0; i < numRepetitions; i++) {
      events.add(Event(name, arrivalTime, duration));
      arrivalTime += interarrivalTime;
    }
    return events;
  }
}

// stochastic process
// process generates multiple events whose durations and interarrival times are based on exponential probability distributions
class StochasticProcess extends Process {
  final double meanDuration;
  final double meanInterarrivalTime;
  final int firstArrival;
  final int endTime;
  final ExpDistribution durationDist;
  final ExpDistribution interarrivalDist;

  StochasticProcess(String name, this.meanDuration, this.meanInterarrivalTime,
      this.firstArrival, this.endTime)
      : durationDist = ExpDistribution(mean: meanDuration),
        interarrivalDist = ExpDistribution(mean: meanInterarrivalTime),
        super(name);

  //   List<Event> generateEvents() {
//   List<Event> events = [];
//   for (int arrivalTime = firstArrival; arrivalTime <= endTime;) {
//     events.add(Event(name, arrivalTime, serviceTime.toInt()));
//     int interarrivalTime = interarrivalDist.next().toInt();
//     arrivalTime += interarrivalTime; // Increment inside the loop
//   }
//   return events;
// }

  @override
  List<Event> generateEvents() {
    List<Event> events = [];
    int arrivalTime = firstArrival;
    while (arrivalTime < endTime) {
      double serviceTime = durationDist.next();
      events.add(Event(name, arrivalTime, serviceTime.toInt()));
      int interarrivalTime = interarrivalDist.next().toInt();
      arrivalTime += interarrivalTime;
    }
    return events;
  }
}
